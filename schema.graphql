# Version: 1.0.0

###############################
####### Version Registry ######
###############################

type Version @entity {
  id: ID!
  " Version hash "
  hash: Bytes!
  " Folio deployer address "
  address: Bytes!
  " Timestamp "
  timestamp: BigInt!
  " Block number "
  blockNumber: BigInt!
}

#############################
####### DTF FOLIO      ######
#############################
type DTF @entity {
  id: ID!

  " Folio ERC20 token address "
  token: Token!

  " Revenue "
  totalRevenue: BigInt!

  " Protocol revenue "
  protocolRevenue: BigInt!

  " Governance revenue "
  governanceRevenue: BigInt!

  " External recipients revenue "
  externalRevenue: BigInt!

  " Folio deployer address "
  deployer: Bytes!

  " Proxy admin address "
  proxyAdmin: Bytes!

  " Minting fee "
  mintingFee: BigInt!

  " tvl Fee "
  tvlFee: BigInt!

  " Auction delay "
  auctionDelay: BigInt!

  " Auction length "
  auctionLength: BigInt!

  " mandate "
  mandate: String!

  " Weight control "
  weightControl: Boolean!

  " Price control "
  priceControl: Int!

  " Annualized tvl fee "
  annualizedTvlFee: BigInt!

  " Auction approvers "
  auctionApprovers: [String!]!

  " Legacy auction approvers "
  legacyAuctionApprovers: [String!]!

  " Auction launchers "
  auctionLaunchers: [String!]!

  " Brand managers "
  brandManagers: [String!]!

  " Default admins "
  admins: [String!]!

  " Legacy admins "
  legacyAdmins: [String!]!

  " stDAO "
  stToken: StakingToken

  " staking token, backup in case of external staking token not indexed"
  stTokenAddress: Bytes

  " Onwer address - should be the timelock for governed tokens "
  ownerAddress: Bytes!

  " Owner governance address "
  ownerGovernance: Governance

  " Trading governance address "
  tradingGovernance: Governance

  " Deployed block number "
  blockNumber: BigInt!

  " Deployed timestamp "
  timestamp: BigInt!

  " Fee recipients "
  feeRecipients: String!

  " Rebalances "
  rebalances: [Rebalance!]! @derivedFrom(field: "dtf")
}

type Rebalance @entity {
  " { DTF Address }-{ Rebalance ID } "
  id: ID!

  " Rebalance nonce "
  nonce: BigInt!

  " DTF "
  dtf: DTF!

  " Tokens "
  tokens: [Token!]!

  " Price control "
  priceControl: String!

  " Weight low limit "
  weightLowLimit: [BigInt!]!

  " Weight spot limit "
  weightSpotLimit: [BigInt!]!

  " Weight high limit "
  weightHighLimit: [BigInt!]!

  " Rebalance low limit "
  rebalanceLowLimit: BigInt!

  " Rebalance spot limit "
  rebalanceSpotLimit: BigInt!

  " Rebalance high limit "
  rebalanceHighLimit: BigInt!

  " Price ranges "
  priceLowLimit: [BigInt!]!

  " Price high limit "
  priceHighLimit: [BigInt!]!

  " Auction launcher window "
  restrictedUntil: BigInt!

  " Available until "
  availableUntil: BigInt!

  " Transaction hash "
  transactionHash: String!

  " Block number "
  blockNumber: BigInt!

  " Timestamp "
  timestamp: BigInt!

  " auction bids "
  auctions: [Auction!]! @derivedFrom(field: "rebalance")
}

type Auction @entity {
  " { DTF Address }-{ Rebalance ID }-{ Auction ID } "
  id: ID!

  " DTF "
  dtf: DTF!

  " Rebalance "
  rebalance: Rebalance!

  " auctioned tokens "
  tokens: [Token!]!

  " Weight low limit "
  weightLowLimit: [BigInt!]!

  " Weight spot limit "
  weightSpotLimit: [BigInt!]!

  " Weight high limit "
  weightHighLimit: [BigInt!]!

  " Rebalance low limit "
  rebalanceLowLimit: BigInt!

  " Rebalance spot limit "
  rebalanceSpotLimit: BigInt!

  " Rebalance high limit "
  rebalanceHighLimit: BigInt!

  " Price low limit "
  priceLowLimit: [BigInt!]!

  " Price high limit "
  priceHighLimit: [BigInt!]!

  " start time "
  startTime: BigInt!

  " end time "
  endTime: BigInt!

  " block number "
  blockNumber: BigInt!

  " timestamp "
  timestamp: BigInt!

  " transaction hash "
  transactionHash: String!

  " bids "
  bids: [RebalanceAuctionBid!]! @derivedFrom(field: "auction")
}

type RebalanceAuctionBid @entity {
  " { DTF Address }-{ Auction ID }-{ Bidder Address }-{ timestamp } "
  id: ID!

  " DTF contract reference "
  dtf: DTF!

  " The auction/trade this bid belongs to "
  auction: Auction!

  " Address of the account that placed the bid "
  bidder: Bytes!

  " Trusted fill "
  filler: Bytes

  " Sell token "
  sellToken: Token!

  " Buy token "
  buyToken: Token!

  " Amount of tokens being sold in this bid "
  sellAmount: BigInt!

  " Amount of tokens being bought in this bid "
  buyAmount: BigInt!

  " Block number when this bid was created "
  blockNumber: BigInt!

  " Timestamp when this bid was created "
  timestamp: BigInt!

  " Transaction hash of the bid transaction "
  transactionHash: String!
}

enum TradeState {
  APPROVED
  LAUNCHED
  CLOSED
}

" @deprecated - v1.0 / v2.0 auctions "
type Trade @entity {
  " Trade ID "
  id: ID!

  " DTF "
  dtf: DTF!

  " Token from "
  sell: Token!

  " Token to "
  buy: Token!

  " Trade sold amount "
  soldAmount: BigInt!

  " Trade bought amount "
  boughtAmount: BigInt!

  " Trade start price "
  startPrice: BigInt!

  " Trade end price "
  endPrice: BigInt!

  " Sell limit spot "
  sellLimitSpot: BigInt!

  " Sell limit high "
  sellLimitHigh: BigInt!

  " Sell limit low "
  sellLimitLow: BigInt!

  " Buy limit spot "
  buyLimitSpot: BigInt!

  " Buy limit high "
  buyLimitHigh: BigInt!

  " Buy limit low "
  buyLimitLow: BigInt!

  " approvedSellLimitSpot "
  approvedSellLimitSpot: BigInt!

  " approvedBuyLimitSpot "
  approvedBuyLimitSpot: BigInt!

  " Approved start price "
  approvedStartPrice: BigInt!

  " Approved end price "
  approvedEndPrice: BigInt!

  " Available at (permissionless start) "
  availableAt: BigInt!

  " Timestamp launch timeout trades become unavailable if not launched within this time "
  launchTimeout: BigInt!

  " Trade start timestamp "
  start: BigInt!

  " Trade end timestamp "
  end: BigInt!

  " Approved timestamp "
  approvedTimestamp: BigInt!

  " Approved block number "
  approvedBlockNumber: BigInt!

  " Approved transaction hash "
  approvedTransactionHash: String!

  " Launched timestamp "
  launchedTimestamp: BigInt!

  " Launched block number "
  launchedBlockNumber: BigInt!

  " Launched transaction hash "
  launchedTransactionHash: String!

  " Closed timestamp "
  closedTimestamp: BigInt!

  " Closed block number "
  closedBlockNumber: BigInt!

  " Closed transaction hash "
  closedTransactionHash: String!

  " isKilled "
  isKilled: Boolean!

  " Runs remaining "
  availableRuns: BigInt!

  " Trade state "
  state: TradeState!

  " Bids "
  bids: [AuctionBid!]! @derivedFrom(field: "auction")
}

" @deprecated - v1.0 / v2.0 auctions "
type AuctionBid @entity {
  " { DTF Address }-{ Trade ID }-{ Bidder Address }-{ log Index } "
  id: ID!

  " DTF contract reference "
  dtf: DTF!

  " The auction/trade this bid belongs to "
  auction: Trade!

  " Address of the account that placed the bid "
  bidder: Bytes!

  " Amount of tokens being sold in this bid "
  sellAmount: BigInt!

  " Amount of tokens being bought in this bid "
  buyAmount: BigInt!

  " Block number when this bid was created "
  blockNumber: BigInt!

  " Timestamp when this bid was created "
  timestamp: BigInt!

  " Transaction hash of the bid transaction "
  transactionHash: String!
}

#############################
####### Token Metadata ######
#############################

enum TokenType {
  DTF
  VOTE
  ASSET
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Address of the token "
  address: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Total number of unique token holders who are currently holding more the token "
  currentHolderCount: BigInt!

  " Total number of cumulative unique token holders who held or are holding the token "
  cumulativeHolderCount: BigInt!

  " Total number of token transfer events "
  transferCount: BigInt!

  " Total number of token mint events "
  mintCount: BigInt!

  " Total number of token burn events "
  burnCount: BigInt!

  " Total token supply "
  totalSupply: BigInt!

  " Total token burned "
  totalBurned: BigInt!

  " Total token minted "
  totalMinted: BigInt!

  " Token type "
  type: TokenType!

  " List of token transfers "
  transfers: [TransferEvent!]! @derivedFrom(field: "token")

  " Token holder's balance "
  holdersBalance: [AccountBalance!]! @derivedFrom(field: "token")

  ##### Snapshots #####

  " Daily snapshot for this token "
  dailyTokenSnapshot: [TokenDailySnapshot!]! @derivedFrom(field: "token")
}

###############################
####### Token Timeseries ######
###############################

type TokenDailySnapshot @entity {
  " { Token Address }-{ # of days since Unix epoch time } "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " Daily total Supply of the token "
  dailyTotalSupply: BigInt!

  " number of accounts holding the token "
  currentHolderCount: BigInt!

  " number of cumulative unique holders "
  cumulativeHolderCount: BigInt!

  " Total number of events occurred in a day "
  dailyEventCount: Int!

  " Total number of transfers in a day "
  dailyTransferCount: Int!

  " Total number of token transfered in a day "
  dailyTransferAmount: BigInt!

  " Total number of mints in a day "
  dailyMintCount: Int!

  " Total number of token minted in a day "
  dailyMintAmount: BigInt!

  " Total number of burns in a day "
  dailyBurnCount: Int!

  " Total number of token burnt in a day "
  dailyBurnAmount: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type TokenHourlySnapshot @entity {
  " { Token Address }-{ # of hours since Unix epoch time } "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " Hourly total Supply of the token "
  hourlyTotalSupply: BigInt!

  " number of accounts holding this token "
  currentHolderCount: BigInt!

  " number of cumulative unique holders "
  cumulativeHolderCount: BigInt!

  " Total number of events occurred in an hour "
  hourlyEventCount: Int!

  " Total number of transfers in a hour "
  hourlyTransferCount: Int!

  " Total amount of token transfered in a hour "
  hourlyTransferAmount: BigInt!

  " Total number of mints in a hour "
  hourlyMintCount: Int!

  " Total amount of token minted in a hour "
  hourlyMintAmount: BigInt!

  " Total number of burns in a hour "
  hourlyBurnCount: Int!

  " Total number of token burnt in a hour "
  hourlyBurnAmount: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Event-Level Data #####
##################################

interface Event {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Address that received the tokens "
  to: Account

  " Address that sent the tokens "
  from: Account

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

# TODO: More generic event type to track all events
type TransferEvent implements Event @entity {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Quantity of tokens transferred "
  amount: BigInt!

  " Account that received the tokens "
  to: Account

  " Account that sent the tokens "
  from: Account

  " Block number of this event "
  blockNumber: BigInt!

  " Transaction type "
  type: String!

  " Timestamp of this event "
  timestamp: BigInt!
}

##################################
######## Account MetaData ########
##################################

# An account is a unique Ethereum address
type Account @entity {
  " Address of the account "
  id: ID!

  " Token transfers to this account "
  transferTo: [TransferEvent!]! @derivedFrom(field: "to")

  " Token transfers from this account "
  transferFrom: [TransferEvent!]! @derivedFrom(field: "from")

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  " Locks "
  locks: [Lock!]! @derivedFrom(field: "account")

  " Token balances snapshot that this account holds "
  balancesSnapshot: [AccountBalanceDailySnapshot!]!
    @derivedFrom(field: "account")
}

type AccountBalance @entity {
  " { Address Of the Account }-{ Address of the Token }"
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigInt!

  " Delegate, used for stTokens "
  delegate: Delegate

  " Block number in which the balance was last modified "
  blockNumber: BigInt

  " Timestamp in which the balance was last modified "
  timestamp: BigInt
}

###############################
###### Account Timeseries #####
###############################

type AccountBalanceDailySnapshot @entity {
  " { Address Of the Account }-{ Address of the Token }-{ # of hours since Unix epoch time } "
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigInt!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

###############################
###### Governance         #####
###############################

enum ProposalState {
  PENDING
  ACTIVE
  CANCELED
  DEFEATED
  SUCCEEDED
  QUEUED
  EXPIRED
  EXECUTED
  VETOED
}

enum VoteChoice {
  FOR
  AGAINST
  ABSTAIN
}

type Governance @entity {
  "Governance framework contract address"
  id: ID!
  "Name of the governance framework"
  name: String!
  "Version of the governance framework"
  version: String!

  " timelock "
  timelock: GovernanceTimelock!

  " Staking token entity, if this doesnt exist, DAO is not supported on UI? "
  token: StakingToken!

  "The delay before voting on a proposal may take place in blocks"
  votingDelay: BigInt!
  "The duration of voting on a proposal in blocks"
  votingPeriod: BigInt!
  "The number of votes required in order for a voter to become a proposer"
  proposalThreshold: BigInt!

  "The number of votes for a proposal to succeed."
  quorumVotes: BigInt
  "Quorum fraction numerator value. (OZ: quorum = totalSupply * numerator / denominator)"
  quorumNumerator: BigInt
  "Quorum fraction denominator value. (OZ: quorum = totalSupply * numerator / denominator)"
  quorumDenominator: BigInt

  "Total number of proposals created"
  proposalCount: BigInt!
  "Number of proposals currently queued for execution"
  proposalsQueued: BigInt!
  "Number of proposals currently executed"
  proposalsExecuted: BigInt!
  "Number of proposals currently canceled"
  proposalsCanceled: BigInt!

  " Proposal list "
  proposals: [Proposal!]! @derivedFrom(field: "governance")
}

type GovernanceTimelock @entity {
  "Timelock contract address"
  id: ID!
  "Governance contract address"
  governance: Governance
  "Number of blocks that are required to pass from the time a proposal reaches quorum until its voting period ends"
  executionDelay: BigInt!
  "Guardians"
  guardians: [String!]!
  " governed entity stakingToken or DTF "
  entity: String!
  " type could be staking token trading or owner or owner of staking token "
  type: String!
}

type Proposal @entity {
  "Internal proposal ID, in this implementation it seems to be a autoincremental id"
  id: ID!
  "Transaction hash of the proposal creation"
  txnHash: String!
  "Proposal description in markdown format"
  description: String!
  "Governance Framework that proposal is part of"
  governance: Governance!

  "Delegate that proposed the proposal"
  proposer: Delegate!
  "State of the proposal"
  state: ProposalState!
  "The number of votes for a proposal to succeed."
  quorumVotes: BigInt!
  "Number of tokenholders at start of voting"
  tokenHoldersAtStart: BigInt!
  "Number of delegates at start of voting"
  delegatesAtStart: BigInt!

  "Number of delegates that voted against the proposal"
  againstDelegateVotes: BigInt!
  "Number of delegates that voted for the proposal"
  forDelegateVotes: BigInt!
  "Number of delegates that voted abstain to the proposal"
  abstainDelegateVotes: BigInt!
  "Total number of delegates that voted on the proposal"
  totalDelegateVotes: BigInt!

  "Weighted votes against the proposal"
  againstWeightedVotes: BigInt!
  "Weighted votes for the proposal"
  forWeightedVotes: BigInt!
  "Weighted votes abstaining to the proposal"
  abstainWeightedVotes: BigInt!
  "Total weighted for/against/abstaining votes"
  totalWeightedVotes: BigInt!

  "Votes associated to this proposal"
  votes: [Vote!]! @derivedFrom(field: "proposal")

  "Block number proposal was created in"
  creationBlock: BigInt!
  "Timestamp of block proposal was created in"
  creationTime: BigInt!
  "Block timestamp from where the voting starts"
  voteStart: BigInt!
  "Block timestamp from where the voting ends"
  voteEnd: BigInt!
  "Transaction hash of the proposal being queued"
  queueTxnHash: String
  "Block number proposal was queued in"
  queueBlock: BigInt
  "Timestamp of block proposal was queued in"
  queueTime: BigInt
  "Once the proposal is queued for execution it will have an ETA of the execution"
  executionETA: BigInt
  "Transaction hash of the proposal execution"
  executionTxnHash: String
  "Block number proposal was executed in"
  executionBlock: BigInt
  "Timestamp of block proposal was executed in"
  executionTime: BigInt
  "Transaction hash of the proposal cancellation"
  cancellationTxnHash: String
  "Block number proposal was canceled in"
  cancellationBlock: BigInt
  "Timestamp of block proposal was canceled in"
  cancellationTime: BigInt

  "Targets data for the change"
  targets: [String!]
  "Values data for the change"
  values: [BigInt!]
  "Signature data for the change"
  signatures: [String!]
  "Call data for the change"
  calldatas: [Bytes!]
}

type Vote @entity(immutable: true) {
  "Delegate ID + Proposal ID + Token ID"
  id: ID!
  "Whether the vote is in favour, against or abstaining to the proposal"
  choice: VoteChoice!
  "Voting weight expressed in the vote"
  weight: BigInt!
  "Reason for voting choice"
  reason: String
  "Delegate that emitted the vote"
  voter: Delegate!
  "Proposal that is being voted on"
  proposal: Proposal!

  "Block number vote is cast in"
  block: BigInt!
  "Timestamp of block vote was cast in"
  blockTime: BigInt!
  "Transaction hash of the vote"
  txnHash: String!
  "Log Index of the event"
  logIndex: BigInt!
  "Unique ID based on the blockTime and logIndex"
  blockTimeId: String!
}

type VoteDailySnapshot @entity {
  "Number of days from Unix epoch time"
  id: ID!
  "Proposal this snapshot is associated with"
  proposal: Proposal!
  "Weighted votes against the proposal at snapshot"
  forWeightedVotes: BigInt!
  "Weighted votes abstaining to the proposal at snapshot"
  againstWeightedVotes: BigInt!
  "Weighted votes for the proposal at snapshot"
  abstainWeightedVotes: BigInt!
  "Total weighted for/against/abstaining votes at snapshot"
  totalWeightedVotes: BigInt!
  "Block number of last block in snapshot"
  blockNumber: BigInt!
  "Timestamp of snapshot"
  timestamp: BigInt!
}

type StakingToken @entity {
  " Stake token address "
  id: ID!

  " Token entity for the sake of consistency but this token is not tracked "
  underlying: Token

  " Stake token "
  token: Token!

  " Governance "
  governance: Governance

  " Legacy governance "
  legacyGovernance: [String!]!

  "Total number of delegates participating on the governance currently"
  currentDelegates: BigInt!

  "Total number of delegates that held delegated votes"
  totalDelegates: BigInt!

  "Total number of votes delegated expressed in the smallest unit of the token"
  delegatedVotesRaw: BigInt!

  "Total number of votes delegated expressed as a BigDecimal normalized value for the token"
  delegatedVotes: BigDecimal!

  " Delegates "
  delegates: [Delegate!]! @derivedFrom(field: "token")

  " DTFs "
  dtfs: [DTF!]! @derivedFrom(field: "stToken")

  " Governance frameworks "
  daos: [Governance!]! @derivedFrom(field: "token")

  " Rewards "
  rewards: [StakingTokenRewards!]! @derivedFrom(field: "stToken")
}

type StakingTokenRewards @entity {
  " { StakingToken Address }-{ Reward Token Address } "
  id: ID!

  " Staking token "
  stToken: StakingToken!

  " Reward token "
  rewardToken: Token!

  " Active "
  active: Boolean!
}

type UnstakingManager @entity {
  " Unstaking manager address "
  id: ID!
  " Staking token "
  token: StakingToken!
}

type Lock @entity {
  " { StakingToken Address }-{ Lock ID } "
  id: ID!

  " Lock id "
  lockId: BigInt!

  "Token address"
  token: StakingToken!

  "Amount of votes delegated to this delegate to be used on proposal votings expressed in the smallest unit of the token"
  amount: BigInt!

  "Account"
  account: Account!

  "Unlock time"
  unlockTime: BigInt!

  " created block "
  createdBlock: BigInt!

  " created timestamp "
  createdTimestamp: BigInt!

  " created txn hash "
  createdTxnHash: String!

  " cancelled block "
  cancelledBlock: BigInt

  " cancelled timestamp "
  cancelledTimestamp: BigInt

  " cancelled txn hash "
  cancelledTxnHash: String

  " claimed block "
  claimedBlock: BigInt

  " claimed timestamp "
  claimedTimestamp: BigInt

  " claimed txn hash "
  claimedTxnHash: String
}

type Delegate @entity {
  "A Delegate is any address that has been delegated with voting tokens by a token holder, id is {stTokenAddress}-{delegateAddress}"
  id: ID!

  "Delegate address"
  address: String!

  "Governance this delegate is related to"
  token: StakingToken!

  "Amount of votes delegated to this delegate to be used on proposal votings expressed in the smallest unit of the token"
  delegatedVotesRaw: BigInt!

  "Amount of votes delegated to this delegate to be used on proposal votings expressed as a BigDecimal normalized value"
  delegatedVotes: BigDecimal!

  "Total token holders that this delegate represents"
  tokenHoldersRepresentedAmount: Int!

  "Token holders that this delegate represents"
  tokenHoldersRepresented: [AccountBalance!]! @derivedFrom(field: "delegate")

  "Votes that a delegate has made in different proposals"
  votes: [Vote!]! @derivedFrom(field: "voter")

  "Number of proposals voted on"
  numberVotes: Int!

  "Proposals that the delegate has created"
  proposals: [Proposal!]! @derivedFrom(field: "proposer")
}

type DelegateChange @entity(immutable: true) {
  "Unique entity used to keep track of delegate changes"
  id: ID!
  "Token address"
  tokenAddress: String!
  "Address for delegator"
  delegator: String!
  "Address for delegate"
  delegate: String!
  "Address for previous delegate"
  previousDelegate: String!
  "Block time change happened"
  blockTimestamp: BigInt!
  "Transaction hash of the delegate change event"
  txnHash: String!
  "Log index for delegate change"
  logIndex: BigInt!
  "Block number of event"
  blockNumber: BigInt!
}

type DelegateVotingPowerChange @entity(immutable: true) {
  "Unique entity used to keep track of voting power delta"
  id: ID!
  "Token addresss"
  tokenAddress: String!
  "Address for delegate"
  delegate: String!
  "Previous voting power of delegate"
  previousBalance: BigInt!
  "New voting power of delegate"
  newBalance: BigInt!
  "Block time change happened"
  blockTimestamp: BigInt!
  "Transaction hash of the voting power change"
  txnHash: String!
  "Log index for delegate voting power change"
  logIndex: BigInt!
  "Block number of event"
  blockNumber: BigInt!
}
